# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-04-26T16:43:57Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MeasureParameterInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'use': 'str',
        'min': 'int',
        'max': 'str',
        'type': 'str',
        'default_value': 'str',
        'documentation': 'str'
    }

    attribute_map = {
        'name': 'name',
        'use': 'use',
        'min': 'min',
        'max': 'max',
        'type': 'type',
        'default_value': 'defaultValue',
        'documentation': 'documentation'
    }

    def __init__(self, name=None, use=None, min=None, max=None, type=None, default_value=None, documentation=None, _configuration=None):  # noqa: E501
        """MeasureParameterInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._use = None
        self._min = None
        self._max = None
        self._type = None
        self._default_value = None
        self._documentation = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if use is not None:
            self.use = use
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if type is not None:
            self.type = type
        if default_value is not None:
            self.default_value = default_value
        if documentation is not None:
            self.documentation = documentation

    @property
    def name(self):
        """Gets the name of this MeasureParameterInfo.  # noqa: E501

        Name of the parameter which is the Fhir ParameterDefinition.name field  # noqa: E501

        :return: The name of this MeasureParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MeasureParameterInfo.

        Name of the parameter which is the Fhir ParameterDefinition.name field  # noqa: E501

        :param name: The name of this MeasureParameterInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def use(self):
        """Gets the use of this MeasureParameterInfo.  # noqa: E501

        A string describing if the parameter is an input or output parameter. FHIR ParameterDefinition.use field  # noqa: E501

        :return: The use of this MeasureParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this MeasureParameterInfo.

        A string describing if the parameter is an input or output parameter. FHIR ParameterDefinition.use field  # noqa: E501

        :param use: The use of this MeasureParameterInfo.  # noqa: E501
        :type: str
        """

        self._use = use

    @property
    def min(self):
        """Gets the min of this MeasureParameterInfo.  # noqa: E501

        The minimum number of times this parameter may be used (ie 0 means optional parameter, greater than or equal to 1 means required parameter) FHIR ParameterDefinition.min field  # noqa: E501

        :return: The min of this MeasureParameterInfo.  # noqa: E501
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this MeasureParameterInfo.

        The minimum number of times this parameter may be used (ie 0 means optional parameter, greater than or equal to 1 means required parameter) FHIR ParameterDefinition.min field  # noqa: E501

        :param min: The min of this MeasureParameterInfo.  # noqa: E501
        :type: int
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this MeasureParameterInfo.  # noqa: E501

        A string representing the maximum number of times this parameter may be used. FHIR ParameterDefinition.max field  # noqa: E501

        :return: The max of this MeasureParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this MeasureParameterInfo.

        A string representing the maximum number of times this parameter may be used. FHIR ParameterDefinition.max field  # noqa: E501

        :param max: The max of this MeasureParameterInfo.  # noqa: E501
        :type: str
        """

        self._max = max

    @property
    def type(self):
        """Gets the type of this MeasureParameterInfo.  # noqa: E501

        The type of the parameter. FHIR ParameterDefinition.type field  # noqa: E501

        :return: The type of this MeasureParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MeasureParameterInfo.

        The type of the parameter. FHIR ParameterDefinition.type field  # noqa: E501

        :param type: The type of this MeasureParameterInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def default_value(self):
        """Gets the default_value of this MeasureParameterInfo.  # noqa: E501

        The defaultValue of the parameter. FHIR ParameterDefinition.defaultValue field  # noqa: E501

        :return: The default_value of this MeasureParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this MeasureParameterInfo.

        The defaultValue of the parameter. FHIR ParameterDefinition.defaultValue field  # noqa: E501

        :param default_value: The default_value of this MeasureParameterInfo.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def documentation(self):
        """Gets the documentation of this MeasureParameterInfo.  # noqa: E501

        A string describing any documentation associated with this parameter. FHIR FHIR ParameterDefinition.documentation field  # noqa: E501

        :return: The documentation of this MeasureParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this MeasureParameterInfo.

        A string describing any documentation associated with this parameter. FHIR FHIR ParameterDefinition.documentation field  # noqa: E501

        :param documentation: The documentation of this MeasureParameterInfo.  # noqa: E501
        :type: str
        """

        self._documentation = documentation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeasureParameterInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasureParameterInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MeasureParameterInfo):
            return True

        return self.to_dict() != other.to_dict()
