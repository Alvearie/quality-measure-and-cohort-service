# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-03-12T22:07:17Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VersionedMeasures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'measure_id': 'str',
        'measure_version': 'str',
        'measure_parameters': 'list[str]',
        'measure_properties': 'list[str]',
        'persist_results': 'bool'
    }

    attribute_map = {
        'measure_id': 'measureId',
        'measure_version': 'measureVersion',
        'measure_parameters': 'measureParameters',
        'measure_properties': 'measureProperties',
        'persist_results': 'persistResults'
    }

    def __init__(self, measure_id=None, measure_version=None, measure_parameters=None, measure_properties=None, persist_results=None):  # noqa: E501
        """VersionedMeasures - a model defined in Swagger"""  # noqa: E501
        self._measure_id = None
        self._measure_version = None
        self._measure_parameters = None
        self._measure_properties = None
        self._persist_results = None
        self.discriminator = None
        self.measure_id = measure_id
        if measure_version is not None:
            self.measure_version = measure_version
        if measure_parameters is not None:
            self.measure_parameters = measure_parameters
        if measure_properties is not None:
            self.measure_properties = measure_properties
        if persist_results is not None:
            self.persist_results = persist_results

    @property
    def measure_id(self):
        """Gets the measure_id of this VersionedMeasures.  # noqa: E501

        Measure identifier used to designate a specific measure to evaluate  # noqa: E501

        :return: The measure_id of this VersionedMeasures.  # noqa: E501
        :rtype: str
        """
        return self._measure_id

    @measure_id.setter
    def measure_id(self, measure_id):
        """Sets the measure_id of this VersionedMeasures.

        Measure identifier used to designate a specific measure to evaluate  # noqa: E501

        :param measure_id: The measure_id of this VersionedMeasures.  # noqa: E501
        :type: str
        """
        if measure_id is None:
            raise ValueError("Invalid value for `measure_id`, must not be `None`")  # noqa: E501

        self._measure_id = measure_id

    @property
    def measure_version(self):
        """Gets the measure_version of this VersionedMeasures.  # noqa: E501

        The version of the measure to evaluate. If none is provided, the latest version of the measure is used.  # noqa: E501

        :return: The measure_version of this VersionedMeasures.  # noqa: E501
        :rtype: str
        """
        return self._measure_version

    @measure_version.setter
    def measure_version(self, measure_version):
        """Sets the measure_version of this VersionedMeasures.

        The version of the measure to evaluate. If none is provided, the latest version of the measure is used.  # noqa: E501

        :param measure_version: The measure_version of this VersionedMeasures.  # noqa: E501
        :type: str
        """

        self._measure_version = measure_version

    @property
    def measure_parameters(self):
        """Gets the measure_parameters of this VersionedMeasures.  # noqa: E501

        A list of parameter strings to be passed to the measure  # noqa: E501

        :return: The measure_parameters of this VersionedMeasures.  # noqa: E501
        :rtype: list[str]
        """
        return self._measure_parameters

    @measure_parameters.setter
    def measure_parameters(self, measure_parameters):
        """Sets the measure_parameters of this VersionedMeasures.

        A list of parameter strings to be passed to the measure  # noqa: E501

        :param measure_parameters: The measure_parameters of this VersionedMeasures.  # noqa: E501
        :type: list[str]
        """

        self._measure_parameters = measure_parameters

    @property
    def measure_properties(self):
        """Gets the measure_properties of this VersionedMeasures.  # noqa: E501

        A list of property strings to be passed to the measure  # noqa: E501

        :return: The measure_properties of this VersionedMeasures.  # noqa: E501
        :rtype: list[str]
        """
        return self._measure_properties

    @measure_properties.setter
    def measure_properties(self, measure_properties):
        """Sets the measure_properties of this VersionedMeasures.

        A list of property strings to be passed to the measure  # noqa: E501

        :param measure_properties: The measure_properties of this VersionedMeasures.  # noqa: E501
        :type: list[str]
        """

        self._measure_properties = measure_properties

    @property
    def persist_results(self):
        """Gets the persist_results of this VersionedMeasures.  # noqa: E501

        If true, results will be persisted in the datastore  # noqa: E501

        :return: The persist_results of this VersionedMeasures.  # noqa: E501
        :rtype: bool
        """
        return self._persist_results

    @persist_results.setter
    def persist_results(self, persist_results):
        """Sets the persist_results of this VersionedMeasures.

        If true, results will be persisted in the datastore  # noqa: E501

        :param persist_results: The persist_results of this VersionedMeasures.  # noqa: E501
        :type: bool
        """

        self._persist_results = persist_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VersionedMeasures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionedMeasures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
