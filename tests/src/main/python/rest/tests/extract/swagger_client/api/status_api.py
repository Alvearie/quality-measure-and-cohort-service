# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 2.1.0 2022-02-18T21:50:45Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StatusApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_health_check_status(self, **kwargs):  # noqa: E501
        """Determine if service is running correctly  # noqa: E501

        This resource differs from /status in that it will will always return a 500 error if the service state is not OK.  This makes it simpler for service front ends (such as Datapower) to detect a failed service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_check_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Override response format
        :return: ServiceStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_health_check_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_health_check_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_health_check_status_with_http_info(self, **kwargs):  # noqa: E501
        """Determine if service is running correctly  # noqa: E501

        This resource differs from /status in that it will will always return a 500 error if the service state is not OK.  This makes it simpler for service front ends (such as Datapower) to detect a failed service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_health_check_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Override response format
        :return: ServiceStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_health_check_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/status/health_check', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_status(self, **kwargs):  # noqa: E501
        """Get status of service  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Override response format
        :param str liveness_check: Perform a shallow liveness check
        :return: ServiceStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Get status of service  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Override response format
        :param str liveness_check: Perform a shallow liveness check
        :return: ServiceStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'liveness_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'liveness_check' in params:
            query_params.append(('liveness_check', params['liveness_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def health_check_enhanced(self, version, fhir_server_connection_config, **kwargs):  # noqa: E501
        """Get the status of the cohorting service and dependent downstream services  # noqa: E501

        Checks the status of the cohorting service and any downstream services used by the cohorting service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.health_check_enhanced(version, fhir_server_connection_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param file fhir_server_connection_config: A configuration file containing information needed to connect to the FHIR server. See https://github.com/Alvearie/quality-measure-and-cohort-service/blob/main/docs/user-guide/fhir-server-config.md for more details.  <p>Example Contents:   <pre>{     \"dataServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     },     \"terminologyServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     } }</pre></p> (required)
        :return: EnhancedHealthCheckResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.health_check_enhanced_with_http_info(version, fhir_server_connection_config, **kwargs)  # noqa: E501
        else:
            (data) = self.health_check_enhanced_with_http_info(version, fhir_server_connection_config, **kwargs)  # noqa: E501
            return data

    def health_check_enhanced_with_http_info(self, version, fhir_server_connection_config, **kwargs):  # noqa: E501
        """Get the status of the cohorting service and dependent downstream services  # noqa: E501

        Checks the status of the cohorting service and any downstream services used by the cohorting service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.health_check_enhanced_with_http_info(version, fhir_server_connection_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param file fhir_server_connection_config: A configuration file containing information needed to connect to the FHIR server. See https://github.com/Alvearie/quality-measure-and-cohort-service/blob/main/docs/user-guide/fhir-server-config.md for more details.  <p>Example Contents:   <pre>{     \"dataServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     },     \"terminologyServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     } }</pre></p> (required)
        :return: EnhancedHealthCheckResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'fhir_server_connection_config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method health_check_enhanced" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `health_check_enhanced`")  # noqa: E501
        # verify the required parameter 'fhir_server_connection_config' is set
        if self.api_client.client_side_validation and ('fhir_server_connection_config' not in params or
                                                       params['fhir_server_connection_config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fhir_server_connection_config` when calling `health_check_enhanced`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'fhir_server_connection_config' in params:
            local_var_files['fhir_server_connection_config'] = params['fhir_server_connection_config']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/status/health_check_enhanced', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnhancedHealthCheckResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
