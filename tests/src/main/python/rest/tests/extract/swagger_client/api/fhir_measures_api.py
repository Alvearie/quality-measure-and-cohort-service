# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-03-12T22:07:17Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FHIRMeasuresApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_measure_parameters(self, version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_identifier_value, **kwargs):  # noqa: E501
        """Get measure parameters  # noqa: E501

        Retrieves the parameter information for libraries linked to by a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measure_parameters(version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_identifier_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param str fhir_server_rest_endpoint: The REST endpoint of the FHIR server the measure/libraries are stored in. For example: https://localhost:9443/fhir-server/api/v4 (required)
        :param str fhir_server_tenant_id: The id of the tenant used to store the measure/library information in the FHIR server.  (required)
        :param str measure_identifier_value: Used to identify the FHIR measure resource you would like the parameter information for using the Measure.Identifier.Value field. (required)
        :param str measure_identifier_system: The system name used to provide a namespace for the measure identifier values. For example, if using social security numbers for the identifier values, one would use http://hl7.org/fhir/sid/us-ssn as the system value.
        :param str measure_version:  The version of the measure to retrieve as represented by the FHIR resource Measure.version field. If a value is not provided, the underlying code will atempt to resolve the most recent version assuming a <Major>.<Minor>.<Patch> format (ie if versions 1.0.0 and 2.0.0 both exist, the code will return the 2.0.0 version)
        :param str fhir_server_tenant_id_header: IBM FHIR Server uses HTTP headers to control which underlying tenant contains the data being retrieved. The default header name used to identify the tenant can be changed by the user as needed for their execution environment. If no value is provided, the value in the base configuration files (X-FHIR-TENANT-ID) is used.
        :param str fhir_data_source_id_header: IBM FHIR Server uses HTTP headers to control which underlying datasource contains the data being retrieved. The default header can be changed by the user as needed for their execution environment. If no value is provided, the value in the base configuration files (X-FHIR-DSID) is used.
        :param str fhir_data_source_id: The id of the underlying datasource used by the FHIR server to contain the data.
        :return: list[MeasureParameterInfoList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_measure_parameters_with_http_info(version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_identifier_value, **kwargs)  # noqa: E501
        else:
            (data) = self.get_measure_parameters_with_http_info(version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_identifier_value, **kwargs)  # noqa: E501
            return data

    def get_measure_parameters_with_http_info(self, version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_identifier_value, **kwargs):  # noqa: E501
        """Get measure parameters  # noqa: E501

        Retrieves the parameter information for libraries linked to by a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measure_parameters_with_http_info(version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_identifier_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param str fhir_server_rest_endpoint: The REST endpoint of the FHIR server the measure/libraries are stored in. For example: https://localhost:9443/fhir-server/api/v4 (required)
        :param str fhir_server_tenant_id: The id of the tenant used to store the measure/library information in the FHIR server.  (required)
        :param str measure_identifier_value: Used to identify the FHIR measure resource you would like the parameter information for using the Measure.Identifier.Value field. (required)
        :param str measure_identifier_system: The system name used to provide a namespace for the measure identifier values. For example, if using social security numbers for the identifier values, one would use http://hl7.org/fhir/sid/us-ssn as the system value.
        :param str measure_version:  The version of the measure to retrieve as represented by the FHIR resource Measure.version field. If a value is not provided, the underlying code will atempt to resolve the most recent version assuming a <Major>.<Minor>.<Patch> format (ie if versions 1.0.0 and 2.0.0 both exist, the code will return the 2.0.0 version)
        :param str fhir_server_tenant_id_header: IBM FHIR Server uses HTTP headers to control which underlying tenant contains the data being retrieved. The default header name used to identify the tenant can be changed by the user as needed for their execution environment. If no value is provided, the value in the base configuration files (X-FHIR-TENANT-ID) is used.
        :param str fhir_data_source_id_header: IBM FHIR Server uses HTTP headers to control which underlying datasource contains the data being retrieved. The default header can be changed by the user as needed for their execution environment. If no value is provided, the value in the base configuration files (X-FHIR-DSID) is used.
        :param str fhir_data_source_id: The id of the underlying datasource used by the FHIR server to contain the data.
        :return: list[MeasureParameterInfoList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'fhir_server_rest_endpoint', 'fhir_server_tenant_id', 'measure_identifier_value', 'measure_identifier_system', 'measure_version', 'fhir_server_tenant_id_header', 'fhir_data_source_id_header', 'fhir_data_source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measure_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_measure_parameters`")  # noqa: E501
        # verify the required parameter 'fhir_server_rest_endpoint' is set
        if ('fhir_server_rest_endpoint' not in params or
                params['fhir_server_rest_endpoint'] is None):
            raise ValueError("Missing the required parameter `fhir_server_rest_endpoint` when calling `get_measure_parameters`")  # noqa: E501
        # verify the required parameter 'fhir_server_tenant_id' is set
        if ('fhir_server_tenant_id' not in params or
                params['fhir_server_tenant_id'] is None):
            raise ValueError("Missing the required parameter `fhir_server_tenant_id` when calling `get_measure_parameters`")  # noqa: E501
        # verify the required parameter 'measure_identifier_value' is set
        if ('measure_identifier_value' not in params or
                params['measure_identifier_value'] is None):
            raise ValueError("Missing the required parameter `measure_identifier_value` when calling `get_measure_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'measure_identifier_value' in params:
            path_params['measure_identifier_value'] = params['measure_identifier_value']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'fhir_server_rest_endpoint' in params:
            query_params.append(('fhir_server_rest_endpoint', params['fhir_server_rest_endpoint']))  # noqa: E501
        if 'fhir_server_tenant_id' in params:
            query_params.append(('fhir_server_tenant_id', params['fhir_server_tenant_id']))  # noqa: E501
        if 'measure_identifier_system' in params:
            query_params.append(('measure_identifier_system', params['measure_identifier_system']))  # noqa: E501
        if 'measure_version' in params:
            query_params.append(('measure_version', params['measure_version']))  # noqa: E501
        if 'fhir_server_tenant_id_header' in params:
            query_params.append(('fhir_server_tenant_id_header', params['fhir_server_tenant_id_header']))  # noqa: E501
        if 'fhir_data_source_id_header' in params:
            query_params.append(('fhir_data_source_id_header', params['fhir_data_source_id_header']))  # noqa: E501
        if 'fhir_data_source_id' in params:
            query_params.append(('fhir_data_source_id', params['fhir_data_source_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/fhir/measure/identifier/{measure_identifier_value}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MeasureParameterInfoList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_measure_parameters_by_id(self, version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_id, **kwargs):  # noqa: E501
        """Get measure parameters by id  # noqa: E501

        Retrieves the parameter information for libraries linked to by a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measure_parameters_by_id(version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param str fhir_server_rest_endpoint: The REST endpoint of the FHIR server the measure/libraries are stored in. For example: https://localhost:9443/fhir-server/api/v4 (required)
        :param str fhir_server_tenant_id: The id of the tenant used to store the measure/library information in the FHIR server.  (required)
        :param str measure_id: FHIR measure resource id for the measure you would like the parameter information for using the Measure.id field. (required)
        :param str fhir_server_tenant_id_header: IBM FHIR Server uses HTTP headers to control which underlying tenant contains the data being retrieved. The default header name used to identify the tenant can be changed by the user as needed for their execution environment. If no value is provided, the value in the base configuration files (X-FHIR-TENANT-ID) is used.
        :param str fhir_data_source_id_header: IBM FHIR Server uses HTTP headers to control which underlying datasource contains the data being retrieved. The default header can be changed by the user as needed for their execution environment. If no value is provided, the value in the base configuration files (X-FHIR-DSID) is used.
        :param str fhir_data_source_id: The id of the underlying datasource used by the FHIR server to contain the data.
        :return: list[MeasureParameterInfoList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_measure_parameters_by_id_with_http_info(version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_measure_parameters_by_id_with_http_info(version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_id, **kwargs)  # noqa: E501
            return data

    def get_measure_parameters_by_id_with_http_info(self, version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_id, **kwargs):  # noqa: E501
        """Get measure parameters by id  # noqa: E501

        Retrieves the parameter information for libraries linked to by a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measure_parameters_by_id_with_http_info(version, fhir_server_rest_endpoint, fhir_server_tenant_id, measure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param str fhir_server_rest_endpoint: The REST endpoint of the FHIR server the measure/libraries are stored in. For example: https://localhost:9443/fhir-server/api/v4 (required)
        :param str fhir_server_tenant_id: The id of the tenant used to store the measure/library information in the FHIR server.  (required)
        :param str measure_id: FHIR measure resource id for the measure you would like the parameter information for using the Measure.id field. (required)
        :param str fhir_server_tenant_id_header: IBM FHIR Server uses HTTP headers to control which underlying tenant contains the data being retrieved. The default header name used to identify the tenant can be changed by the user as needed for their execution environment. If no value is provided, the value in the base configuration files (X-FHIR-TENANT-ID) is used.
        :param str fhir_data_source_id_header: IBM FHIR Server uses HTTP headers to control which underlying datasource contains the data being retrieved. The default header can be changed by the user as needed for their execution environment. If no value is provided, the value in the base configuration files (X-FHIR-DSID) is used.
        :param str fhir_data_source_id: The id of the underlying datasource used by the FHIR server to contain the data.
        :return: list[MeasureParameterInfoList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'fhir_server_rest_endpoint', 'fhir_server_tenant_id', 'measure_id', 'fhir_server_tenant_id_header', 'fhir_data_source_id_header', 'fhir_data_source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measure_parameters_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_measure_parameters_by_id`")  # noqa: E501
        # verify the required parameter 'fhir_server_rest_endpoint' is set
        if ('fhir_server_rest_endpoint' not in params or
                params['fhir_server_rest_endpoint'] is None):
            raise ValueError("Missing the required parameter `fhir_server_rest_endpoint` when calling `get_measure_parameters_by_id`")  # noqa: E501
        # verify the required parameter 'fhir_server_tenant_id' is set
        if ('fhir_server_tenant_id' not in params or
                params['fhir_server_tenant_id'] is None):
            raise ValueError("Missing the required parameter `fhir_server_tenant_id` when calling `get_measure_parameters_by_id`")  # noqa: E501
        # verify the required parameter 'measure_id' is set
        if ('measure_id' not in params or
                params['measure_id'] is None):
            raise ValueError("Missing the required parameter `measure_id` when calling `get_measure_parameters_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'measure_id' in params:
            path_params['measure_id'] = params['measure_id']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'fhir_server_rest_endpoint' in params:
            query_params.append(('fhir_server_rest_endpoint', params['fhir_server_rest_endpoint']))  # noqa: E501
        if 'fhir_server_tenant_id' in params:
            query_params.append(('fhir_server_tenant_id', params['fhir_server_tenant_id']))  # noqa: E501
        if 'fhir_server_tenant_id_header' in params:
            query_params.append(('fhir_server_tenant_id_header', params['fhir_server_tenant_id_header']))  # noqa: E501
        if 'fhir_data_source_id_header' in params:
            query_params.append(('fhir_data_source_id_header', params['fhir_data_source_id_header']))  # noqa: E501
        if 'fhir_data_source_id' in params:
            query_params.append(('fhir_data_source_id', params['fhir_data_source_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/fhir/measure/{measure_id}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MeasureParameterInfoList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
