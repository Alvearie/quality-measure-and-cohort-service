# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-07-22T12:47:28Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FHIRMeasuresApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_measure_parameters(self, version, measure_identifier_value, fhir_data_server_config, **kwargs):  # noqa: E501
        """Get measure parameters  # noqa: E501

        Retrieves the parameter information for libraries linked to by a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measure_parameters(version, measure_identifier_value, fhir_data_server_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param str measure_identifier_value: Used to identify the FHIR measure resource you would like the parameter information for using the Measure.Identifier.Value field. (required)
        :param file fhir_data_server_config: A configuration file containing information needed to connect to the FHIR server. See https://github.com/Alvearie/quality-measure-and-cohort-service/blob/main/docs/user-guide/getting-started.md#fhir-server-configuration for more details.  Example Contents:   <pre>{     \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",     \"endpoint\": \"https://fhir-internal.dev:9443/fhir-server/api/v4\",     \"user\": \"fhiruser\",     \"password\": \"replaceWithfhiruserPassword\",     \"logInfo\": [         \"ALL\"     ],     \"tenantId\": \"default\" }</pre> (required)
        :param str measure_identifier_system: The system name used to provide a namespace for the measure identifier values. For example, if using social security numbers for the identifier values, one would use http://hl7.org/fhir/sid/us-ssn as the system value.
        :param str measure_version:  The version of the measure to retrieve as represented by the FHIR resource Measure.version field. If a value is not provided, the underlying code will atempt to resolve the most recent version assuming a <Major>.<Minor>.<Patch> format (ie if versions 1.0.0 and 2.0.0 both exist, the code will return the 2.0.0 version)
        :return: MeasureParameterInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_measure_parameters_with_http_info(version, measure_identifier_value, fhir_data_server_config, **kwargs)  # noqa: E501
        else:
            (data) = self.get_measure_parameters_with_http_info(version, measure_identifier_value, fhir_data_server_config, **kwargs)  # noqa: E501
            return data

    def get_measure_parameters_with_http_info(self, version, measure_identifier_value, fhir_data_server_config, **kwargs):  # noqa: E501
        """Get measure parameters  # noqa: E501

        Retrieves the parameter information for libraries linked to by a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measure_parameters_with_http_info(version, measure_identifier_value, fhir_data_server_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param str measure_identifier_value: Used to identify the FHIR measure resource you would like the parameter information for using the Measure.Identifier.Value field. (required)
        :param file fhir_data_server_config: A configuration file containing information needed to connect to the FHIR server. See https://github.com/Alvearie/quality-measure-and-cohort-service/blob/main/docs/user-guide/getting-started.md#fhir-server-configuration for more details.  Example Contents:   <pre>{     \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",     \"endpoint\": \"https://fhir-internal.dev:9443/fhir-server/api/v4\",     \"user\": \"fhiruser\",     \"password\": \"replaceWithfhiruserPassword\",     \"logInfo\": [         \"ALL\"     ],     \"tenantId\": \"default\" }</pre> (required)
        :param str measure_identifier_system: The system name used to provide a namespace for the measure identifier values. For example, if using social security numbers for the identifier values, one would use http://hl7.org/fhir/sid/us-ssn as the system value.
        :param str measure_version:  The version of the measure to retrieve as represented by the FHIR resource Measure.version field. If a value is not provided, the underlying code will atempt to resolve the most recent version assuming a <Major>.<Minor>.<Patch> format (ie if versions 1.0.0 and 2.0.0 both exist, the code will return the 2.0.0 version)
        :return: MeasureParameterInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'measure_identifier_value', 'fhir_data_server_config', 'measure_identifier_system', 'measure_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measure_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `get_measure_parameters`")  # noqa: E501
        # verify the required parameter 'measure_identifier_value' is set
        if self.api_client.client_side_validation and ('measure_identifier_value' not in params or
                                                       params['measure_identifier_value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `measure_identifier_value` when calling `get_measure_parameters`")  # noqa: E501
        # verify the required parameter 'fhir_data_server_config' is set
        if self.api_client.client_side_validation and ('fhir_data_server_config' not in params or
                                                       params['fhir_data_server_config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fhir_data_server_config` when calling `get_measure_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'measure_identifier_value' in params:
            path_params['measure_identifier_value'] = params['measure_identifier_value']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'measure_identifier_system' in params:
            query_params.append(('measure_identifier_system', params['measure_identifier_system']))  # noqa: E501
        if 'measure_version' in params:
            query_params.append(('measure_version', params['measure_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'fhir_data_server_config' in params:
            local_var_files['fhir_data_server_config'] = params['fhir_data_server_config']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/fhir/measure/identifier/{measure_identifier_value}/parameters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeasureParameterInfoList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_measure_parameters_by_id(self, version, measure_id, fhir_data_server_config, **kwargs):  # noqa: E501
        """Get measure parameters by id  # noqa: E501

        Retrieves the parameter information for libraries linked to by a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measure_parameters_by_id(version, measure_id, fhir_data_server_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param str measure_id: FHIR measure resource id for the measure you would like the parameter information for using the Measure.id field. (required)
        :param file fhir_data_server_config: A configuration file containing information needed to connect to the FHIR server. See https://github.com/Alvearie/quality-measure-and-cohort-service/blob/main/docs/user-guide/getting-started.md#fhir-server-configuration for more details.  Example Contents:   <pre>{     \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",     \"endpoint\": \"https://fhir-internal.dev:9443/fhir-server/api/v4\",     \"user\": \"fhiruser\",     \"password\": \"replaceWithfhiruserPassword\",     \"logInfo\": [         \"ALL\"     ],     \"tenantId\": \"default\" }</pre> (required)
        :return: MeasureParameterInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_measure_parameters_by_id_with_http_info(version, measure_id, fhir_data_server_config, **kwargs)  # noqa: E501
        else:
            (data) = self.get_measure_parameters_by_id_with_http_info(version, measure_id, fhir_data_server_config, **kwargs)  # noqa: E501
            return data

    def get_measure_parameters_by_id_with_http_info(self, version, measure_id, fhir_data_server_config, **kwargs):  # noqa: E501
        """Get measure parameters by id  # noqa: E501

        Retrieves the parameter information for libraries linked to by a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measure_parameters_by_id_with_http_info(version, measure_id, fhir_data_server_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param str measure_id: FHIR measure resource id for the measure you would like the parameter information for using the Measure.id field. (required)
        :param file fhir_data_server_config: A configuration file containing information needed to connect to the FHIR server. See https://github.com/Alvearie/quality-measure-and-cohort-service/blob/main/docs/user-guide/getting-started.md#fhir-server-configuration for more details.  Example Contents:   <pre>{     \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",     \"endpoint\": \"https://fhir-internal.dev:9443/fhir-server/api/v4\",     \"user\": \"fhiruser\",     \"password\": \"replaceWithfhiruserPassword\",     \"logInfo\": [         \"ALL\"     ],     \"tenantId\": \"default\" }</pre> (required)
        :return: MeasureParameterInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'measure_id', 'fhir_data_server_config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measure_parameters_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `get_measure_parameters_by_id`")  # noqa: E501
        # verify the required parameter 'measure_id' is set
        if self.api_client.client_side_validation and ('measure_id' not in params or
                                                       params['measure_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `measure_id` when calling `get_measure_parameters_by_id`")  # noqa: E501
        # verify the required parameter 'fhir_data_server_config' is set
        if self.api_client.client_side_validation and ('fhir_data_server_config' not in params or
                                                       params['fhir_data_server_config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fhir_data_server_config` when calling `get_measure_parameters_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'measure_id' in params:
            path_params['measure_id'] = params['measure_id']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'fhir_data_server_config' in params:
            local_var_files['fhir_data_server_config'] = params['fhir_data_server_config']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/fhir/measure/{measure_id}/parameters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeasureParameterInfoList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
