# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-07-22T12:47:28Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MeasureEvaluationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def evaluate_measure(self, version, request_data, measure, **kwargs):  # noqa: E501
        """Evaluates a measure bundle for a single patient  # noqa: E501

        The body of the request is a multipart/form-data request with an application/json attachment named 'request_data' that describes the measure evaluation that will be performed and an application/zip attachment named 'measure' that contains the measure and library artifacts to be evaluated. Valueset resources required for Measure evaluation must be loaded to the FHIR server in advance of an evaluation request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_measure(version, request_data, measure, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param file request_data: <p>A configuration file containing the information needed to process a measure evaluation request. Two possible FHIR server endoints can be configured <code>dataServerConfig</code> and <code>terminologyServerConfig</code>. Only the <code>dataServerConfig</code> is required. If <code>terminologyServerConfig</code> is not provided, the connection details are assumed to be the same as the <code>dataServerConfig</code> connection.</p><p>The <code>measureContext.measureId</code> field can be a FHIR resource ID or canonical URL. Alternatively, <code>measureContext.identifier</code> and <code>measureContext.version</code> can be used to lookup the measure based on a business identifier found in the resource definition. Only one of measureId or identifier + version should be specified. Canonical URL is the recommended lookup mechanism.</p><p>The parameter types and formats are described in detail in the <a href=\"http://alvearie.io/quality-measure-and-cohort-service/#/user-guide/parameter-formats?id=parameter-formats\">user guide</a>.</p><p>The <code>evidenceOptions</code> controls the granularity of evidence data to be written to the FHIR MeasureReport. The <code>expandValueSets</code> flag is used to control whether or not the terminology provider is used to expand ValueSet references or if the FHIR :in modifier is used during search requests. The FHIR :in modifier is supported in IBM FHIR 4.7.0 and above. The default behavior is to expand value sets using the terminology provider in order to cover the widest range of FHIR server functionality. A value of false can be used to improve search performance if terminology resources are available on the data server and it supports the :in modifier. The <code>searchPageSize</code> controls how many data records are retrieved per request during FHIR search API execution. The default value for this setting is small in most servers and performance can be boosted by larger values. The default is 1000 which is the maximum allowed page size in IBM FHIR.</p><p>Example Contents:   <pre>{     \"dataServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     },     \"patientId\": \"PATIENTID\",     \"measureContext\": {         \"measureId\": \"MEASUREID\",         \"identifier\": null,         \"version\": null,         \"parameters\": {             \"Measurement Period\": {                 \"type\": \"interval\",                 \"start\": {                     \"type\": \"date\",                     \"value\": \"2019-07-04\"                 },                 \"startInclusive\": true,                 \"end\": {                     \"type\": \"date\",                     \"value\": \"2020-07-04\"                 },                 \"endInclusive\": true             }         }     },     \"evidenceOptions\": {         \"includeEvaluatedResources\": false,         \"defineReturnOption\": \"ALL\"     },     \"expandValueSets\": true     \"searchPageSize\": 1000 }</pre></p> (required)
        :param file measure: A file in ZIP format that contains the FHIR resources to use in the evaluation. This should contain all the FHIR Measure and Library resources needed in a particular directory structure as follows:<pre>fhirResources/MeasureName-MeasureVersion.json fhirResources/libraries/LibraryName1-LibraryVersion.json fhirResources/libraries/LibraryName2-LibraryVersion.json etc. </pre> (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.evaluate_measure_with_http_info(version, request_data, measure, **kwargs)  # noqa: E501
        else:
            (data) = self.evaluate_measure_with_http_info(version, request_data, measure, **kwargs)  # noqa: E501
            return data

    def evaluate_measure_with_http_info(self, version, request_data, measure, **kwargs):  # noqa: E501
        """Evaluates a measure bundle for a single patient  # noqa: E501

        The body of the request is a multipart/form-data request with an application/json attachment named 'request_data' that describes the measure evaluation that will be performed and an application/zip attachment named 'measure' that contains the measure and library artifacts to be evaluated. Valueset resources required for Measure evaluation must be loaded to the FHIR server in advance of an evaluation request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_measure_with_http_info(version, request_data, measure, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param file request_data: <p>A configuration file containing the information needed to process a measure evaluation request. Two possible FHIR server endoints can be configured <code>dataServerConfig</code> and <code>terminologyServerConfig</code>. Only the <code>dataServerConfig</code> is required. If <code>terminologyServerConfig</code> is not provided, the connection details are assumed to be the same as the <code>dataServerConfig</code> connection.</p><p>The <code>measureContext.measureId</code> field can be a FHIR resource ID or canonical URL. Alternatively, <code>measureContext.identifier</code> and <code>measureContext.version</code> can be used to lookup the measure based on a business identifier found in the resource definition. Only one of measureId or identifier + version should be specified. Canonical URL is the recommended lookup mechanism.</p><p>The parameter types and formats are described in detail in the <a href=\"http://alvearie.io/quality-measure-and-cohort-service/#/user-guide/parameter-formats?id=parameter-formats\">user guide</a>.</p><p>The <code>evidenceOptions</code> controls the granularity of evidence data to be written to the FHIR MeasureReport. The <code>expandValueSets</code> flag is used to control whether or not the terminology provider is used to expand ValueSet references or if the FHIR :in modifier is used during search requests. The FHIR :in modifier is supported in IBM FHIR 4.7.0 and above. The default behavior is to expand value sets using the terminology provider in order to cover the widest range of FHIR server functionality. A value of false can be used to improve search performance if terminology resources are available on the data server and it supports the :in modifier. The <code>searchPageSize</code> controls how many data records are retrieved per request during FHIR search API execution. The default value for this setting is small in most servers and performance can be boosted by larger values. The default is 1000 which is the maximum allowed page size in IBM FHIR.</p><p>Example Contents:   <pre>{     \"dataServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     },     \"patientId\": \"PATIENTID\",     \"measureContext\": {         \"measureId\": \"MEASUREID\",         \"identifier\": null,         \"version\": null,         \"parameters\": {             \"Measurement Period\": {                 \"type\": \"interval\",                 \"start\": {                     \"type\": \"date\",                     \"value\": \"2019-07-04\"                 },                 \"startInclusive\": true,                 \"end\": {                     \"type\": \"date\",                     \"value\": \"2020-07-04\"                 },                 \"endInclusive\": true             }         }     },     \"evidenceOptions\": {         \"includeEvaluatedResources\": false,         \"defineReturnOption\": \"ALL\"     },     \"expandValueSets\": true     \"searchPageSize\": 1000 }</pre></p> (required)
        :param file measure: A file in ZIP format that contains the FHIR resources to use in the evaluation. This should contain all the FHIR Measure and Library resources needed in a particular directory structure as follows:<pre>fhirResources/MeasureName-MeasureVersion.json fhirResources/libraries/LibraryName1-LibraryVersion.json fhirResources/libraries/LibraryName2-LibraryVersion.json etc. </pre> (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request_data', 'measure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluate_measure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `evaluate_measure`")  # noqa: E501
        # verify the required parameter 'request_data' is set
        if self.api_client.client_side_validation and ('request_data' not in params or
                                                       params['request_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request_data` when calling `evaluate_measure`")  # noqa: E501
        # verify the required parameter 'measure' is set
        if self.api_client.client_side_validation and ('measure' not in params or
                                                       params['measure'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `measure` when calling `evaluate_measure`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            local_var_files['request_data'] = params['request_data']  # noqa: E501
        if 'measure' in params:
            local_var_files['measure'] = params['measure']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/evaluation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def evaluate_patient_list_measure(self, version, request_data, measure, **kwargs):  # noqa: E501
        """Evaluates a measure bundle for a list of patients  # noqa: E501

        The body of the request is a multipart/form-data request with an application/json attachment named 'request_data' that describes the measure evaluation that will be performed and an application/zip attachment named 'measure' that contains the measure and library artifacts to be evaluated. Valueset resources required for Measure evaluation must be loaded to the FHIR server in advance of an evaluation request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_patient_list_measure(version, request_data, measure, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param file request_data: <p>A configuration file containing the information needed to process a measure evaluation request. Two possible FHIR server endoints can be configured <code>dataServerConfig</code> and <code>terminologyServerConfig</code>. Only the <code>dataServerConfig</code> is required. If <code>terminologyServerConfig</code> is not provided, the connection details are assumed to be the same as the <code>dataServerConfig</code> connection.</p><p>The <code>measureContext.measureId</code> field can be a FHIR resource ID or canonical URL. Alternatively, <code>measureContext.identifier</code> and <code>measureContext.version</code> can be used to lookup the measure based on a business identifier found in the resource definition. Only one of measureId or identifier + version should be specified. Canonical URL is the recommended lookup mechanism.</p><p>The parameter types and formats are described in detail in the <a href=\"http://alvearie.io/quality-measure-and-cohort-service/#/user-guide/parameter-formats?id=parameter-formats\">user guide</a>.</p><p>The <code>evidenceOptions</code> controls the granularity of evidence data to be written to the FHIR MeasureReport. The <code>expandValueSets</code> flag is used to control whether or not the terminology provider is used to expand ValueSet references or if the FHIR :in modifier is used during search requests. The FHIR :in modifier is supported in IBM FHIR 4.7.0 and above. The default behavior is to expand value sets using the terminology provider in order to cover the widest range of FHIR server functionality. A value of false can be used to improve search performance if terminology resources are available on the data server and it supports the :in modifier. The <code>searchPageSize</code> controls how many data records are retrieved per request during FHIR search API execution. The default value for this setting is small in most servers and performance can be boosted by larger values. The default is 1000 which is the maximum allowed page size in IBM FHIR.</p><p>Example Contents:   <pre>{     \"dataServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     },     \"patientIds\": [         \"PATIENT_ID_1\",         \"PATIENT_ID_2\"     ],     \"measureContext\": {         \"measureId\": \"MEASUREID\",         \"identifier\": null,         \"version\": null,         \"parameters\": {             \"Measurement Period\": {                 \"type\": \"interval\",                 \"start\": {                     \"type\": \"date\",                     \"value\": \"2019-07-04\"                 },                 \"startInclusive\": true,                 \"end\": {                     \"type\": \"date\",                     \"value\": \"2020-07-04\"                 },                 \"endInclusive\": true             }         }     },     \"evidenceOptions\": {         \"includeEvaluatedResources\": false,         \"defineReturnOption\": \"ALL\"     },     \"expandValueSets\": true     \"searchPageSize\": 1000 }</pre></p> (required)
        :param file measure: A file in ZIP format that contains the FHIR resources to use in the evaluation. This should contain all the FHIR Measure and Library resources needed in a particular directory structure as follows:<pre>fhirResources/MeasureName-MeasureVersion.json fhirResources/libraries/LibraryName1-LibraryVersion.json fhirResources/libraries/LibraryName2-LibraryVersion.json etc. </pre> (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.evaluate_patient_list_measure_with_http_info(version, request_data, measure, **kwargs)  # noqa: E501
        else:
            (data) = self.evaluate_patient_list_measure_with_http_info(version, request_data, measure, **kwargs)  # noqa: E501
            return data

    def evaluate_patient_list_measure_with_http_info(self, version, request_data, measure, **kwargs):  # noqa: E501
        """Evaluates a measure bundle for a list of patients  # noqa: E501

        The body of the request is a multipart/form-data request with an application/json attachment named 'request_data' that describes the measure evaluation that will be performed and an application/zip attachment named 'measure' that contains the measure and library artifacts to be evaluated. Valueset resources required for Measure evaluation must be loaded to the FHIR server in advance of an evaluation request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_patient_list_measure_with_http_info(version, request_data, measure, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param file request_data: <p>A configuration file containing the information needed to process a measure evaluation request. Two possible FHIR server endoints can be configured <code>dataServerConfig</code> and <code>terminologyServerConfig</code>. Only the <code>dataServerConfig</code> is required. If <code>terminologyServerConfig</code> is not provided, the connection details are assumed to be the same as the <code>dataServerConfig</code> connection.</p><p>The <code>measureContext.measureId</code> field can be a FHIR resource ID or canonical URL. Alternatively, <code>measureContext.identifier</code> and <code>measureContext.version</code> can be used to lookup the measure based on a business identifier found in the resource definition. Only one of measureId or identifier + version should be specified. Canonical URL is the recommended lookup mechanism.</p><p>The parameter types and formats are described in detail in the <a href=\"http://alvearie.io/quality-measure-and-cohort-service/#/user-guide/parameter-formats?id=parameter-formats\">user guide</a>.</p><p>The <code>evidenceOptions</code> controls the granularity of evidence data to be written to the FHIR MeasureReport. The <code>expandValueSets</code> flag is used to control whether or not the terminology provider is used to expand ValueSet references or if the FHIR :in modifier is used during search requests. The FHIR :in modifier is supported in IBM FHIR 4.7.0 and above. The default behavior is to expand value sets using the terminology provider in order to cover the widest range of FHIR server functionality. A value of false can be used to improve search performance if terminology resources are available on the data server and it supports the :in modifier. The <code>searchPageSize</code> controls how many data records are retrieved per request during FHIR search API execution. The default value for this setting is small in most servers and performance can be boosted by larger values. The default is 1000 which is the maximum allowed page size in IBM FHIR.</p><p>Example Contents:   <pre>{     \"dataServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     },     \"patientIds\": [         \"PATIENT_ID_1\",         \"PATIENT_ID_2\"     ],     \"measureContext\": {         \"measureId\": \"MEASUREID\",         \"identifier\": null,         \"version\": null,         \"parameters\": {             \"Measurement Period\": {                 \"type\": \"interval\",                 \"start\": {                     \"type\": \"date\",                     \"value\": \"2019-07-04\"                 },                 \"startInclusive\": true,                 \"end\": {                     \"type\": \"date\",                     \"value\": \"2020-07-04\"                 },                 \"endInclusive\": true             }         }     },     \"evidenceOptions\": {         \"includeEvaluatedResources\": false,         \"defineReturnOption\": \"ALL\"     },     \"expandValueSets\": true     \"searchPageSize\": 1000 }</pre></p> (required)
        :param file measure: A file in ZIP format that contains the FHIR resources to use in the evaluation. This should contain all the FHIR Measure and Library resources needed in a particular directory structure as follows:<pre>fhirResources/MeasureName-MeasureVersion.json fhirResources/libraries/LibraryName1-LibraryVersion.json fhirResources/libraries/LibraryName2-LibraryVersion.json etc. </pre> (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request_data', 'measure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluate_patient_list_measure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `evaluate_patient_list_measure`")  # noqa: E501
        # verify the required parameter 'request_data' is set
        if self.api_client.client_side_validation and ('request_data' not in params or
                                                       params['request_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request_data` when calling `evaluate_patient_list_measure`")  # noqa: E501
        # verify the required parameter 'measure' is set
        if self.api_client.client_side_validation and ('measure' not in params or
                                                       params['measure'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `measure` when calling `evaluate_patient_list_measure`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            local_var_files['request_data'] = params['request_data']  # noqa: E501
        if 'measure' in params:
            local_var_files['measure'] = params['measure']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/evaluation-patient-list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
