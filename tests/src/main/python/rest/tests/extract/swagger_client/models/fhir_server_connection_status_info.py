# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 2.1.0 2022-02-18T21:50:45Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FhirServerConnectionStatusInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_error_list': 'ServiceErrorList',
        'server_config_type': 'str',
        'connection_results': 'str'
    }

    attribute_map = {
        'service_error_list': 'serviceErrorList',
        'server_config_type': 'serverConfigType',
        'connection_results': 'connectionResults'
    }

    def __init__(self, service_error_list=None, server_config_type=None, connection_results=None, _configuration=None):  # noqa: E501
        """FhirServerConnectionStatusInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._service_error_list = None
        self._server_config_type = None
        self._connection_results = None
        self.discriminator = None

        if service_error_list is not None:
            self.service_error_list = service_error_list
        if server_config_type is not None:
            self.server_config_type = server_config_type
        if connection_results is not None:
            self.connection_results = connection_results

    @property
    def service_error_list(self):
        """Gets the service_error_list of this FhirServerConnectionStatusInfo.  # noqa: E501


        :return: The service_error_list of this FhirServerConnectionStatusInfo.  # noqa: E501
        :rtype: ServiceErrorList
        """
        return self._service_error_list

    @service_error_list.setter
    def service_error_list(self, service_error_list):
        """Sets the service_error_list of this FhirServerConnectionStatusInfo.


        :param service_error_list: The service_error_list of this FhirServerConnectionStatusInfo.  # noqa: E501
        :type: ServiceErrorList
        """

        self._service_error_list = service_error_list

    @property
    def server_config_type(self):
        """Gets the server_config_type of this FhirServerConnectionStatusInfo.  # noqa: E501

        A string describing the type of FHIR server config  # noqa: E501

        :return: The server_config_type of this FhirServerConnectionStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._server_config_type

    @server_config_type.setter
    def server_config_type(self, server_config_type):
        """Sets the server_config_type of this FhirServerConnectionStatusInfo.

        A string describing the type of FHIR server config  # noqa: E501

        :param server_config_type: The server_config_type of this FhirServerConnectionStatusInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["dataServerConfig", "terminologyServerConfig"]  # noqa: E501
        if (self._configuration.client_side_validation and
                server_config_type not in allowed_values):
            raise ValueError(
                "Invalid value for `server_config_type` ({0}), must be one of {1}"  # noqa: E501
                .format(server_config_type, allowed_values)
            )

        self._server_config_type = server_config_type

    @property
    def connection_results(self):
        """Gets the connection_results of this FhirServerConnectionStatusInfo.  # noqa: E501

        Result of the connection attempt  # noqa: E501

        :return: The connection_results of this FhirServerConnectionStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._connection_results

    @connection_results.setter
    def connection_results(self, connection_results):
        """Sets the connection_results of this FhirServerConnectionStatusInfo.

        Result of the connection attempt  # noqa: E501

        :param connection_results: The connection_results of this FhirServerConnectionStatusInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["success", "failure", "notAttempted"]  # noqa: E501
        if (self._configuration.client_side_validation and
                connection_results not in allowed_values):
            raise ValueError(
                "Invalid value for `connection_results` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_results, allowed_values)
            )

        self._connection_results = connection_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FhirServerConnectionStatusInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FhirServerConnectionStatusInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FhirServerConnectionStatusInfo):
            return True

        return self.to_dict() != other.to_dict()
