# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-03-12T22:07:17Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EvaluateMeasuresStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'job_start_time': 'datetime',
        'job_finish_time': 'datetime',
        'job_progress': 'str',
        'job_status': 'str'
    }

    attribute_map = {
        'job_id': 'jobId',
        'job_start_time': 'jobStartTime',
        'job_finish_time': 'jobFinishTime',
        'job_progress': 'jobProgress',
        'job_status': 'jobStatus'
    }

    def __init__(self, job_id=None, job_start_time=None, job_finish_time=None, job_progress=None, job_status=None):  # noqa: E501
        """EvaluateMeasuresStatus - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._job_start_time = None
        self._job_finish_time = None
        self._job_progress = None
        self._job_status = None
        self.discriminator = None
        if job_id is not None:
            self.job_id = job_id
        if job_start_time is not None:
            self.job_start_time = job_start_time
        if job_finish_time is not None:
            self.job_finish_time = job_finish_time
        if job_progress is not None:
            self.job_progress = job_progress
        if job_status is not None:
            self.job_status = job_status

    @property
    def job_id(self):
        """Gets the job_id of this EvaluateMeasuresStatus.  # noqa: E501

        Measure evaluation job identifier  # noqa: E501

        :return: The job_id of this EvaluateMeasuresStatus.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this EvaluateMeasuresStatus.

        Measure evaluation job identifier  # noqa: E501

        :param job_id: The job_id of this EvaluateMeasuresStatus.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_start_time(self):
        """Gets the job_start_time of this EvaluateMeasuresStatus.  # noqa: E501

        The time the measure evaluation job was started  # noqa: E501

        :return: The job_start_time of this EvaluateMeasuresStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._job_start_time

    @job_start_time.setter
    def job_start_time(self, job_start_time):
        """Sets the job_start_time of this EvaluateMeasuresStatus.

        The time the measure evaluation job was started  # noqa: E501

        :param job_start_time: The job_start_time of this EvaluateMeasuresStatus.  # noqa: E501
        :type: datetime
        """

        self._job_start_time = job_start_time

    @property
    def job_finish_time(self):
        """Gets the job_finish_time of this EvaluateMeasuresStatus.  # noqa: E501

        The time the measure evaluation job finished  # noqa: E501

        :return: The job_finish_time of this EvaluateMeasuresStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._job_finish_time

    @job_finish_time.setter
    def job_finish_time(self, job_finish_time):
        """Sets the job_finish_time of this EvaluateMeasuresStatus.

        The time the measure evaluation job finished  # noqa: E501

        :param job_finish_time: The job_finish_time of this EvaluateMeasuresStatus.  # noqa: E501
        :type: datetime
        """

        self._job_finish_time = job_finish_time

    @property
    def job_progress(self):
        """Gets the job_progress of this EvaluateMeasuresStatus.  # noqa: E501

        Percentage of the measure evaluation job that is completed  # noqa: E501

        :return: The job_progress of this EvaluateMeasuresStatus.  # noqa: E501
        :rtype: str
        """
        return self._job_progress

    @job_progress.setter
    def job_progress(self, job_progress):
        """Sets the job_progress of this EvaluateMeasuresStatus.

        Percentage of the measure evaluation job that is completed  # noqa: E501

        :param job_progress: The job_progress of this EvaluateMeasuresStatus.  # noqa: E501
        :type: str
        """

        self._job_progress = job_progress

    @property
    def job_status(self):
        """Gets the job_status of this EvaluateMeasuresStatus.  # noqa: E501

        Status of the measure evaluation job (eg. running, completed, error etc.)  # noqa: E501

        :return: The job_status of this EvaluateMeasuresStatus.  # noqa: E501
        :rtype: str
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this EvaluateMeasuresStatus.

        Status of the measure evaluation job (eg. running, completed, error etc.)  # noqa: E501

        :param job_status: The job_status of this EvaluateMeasuresStatus.  # noqa: E501
        :type: str
        """

        self._job_status = job_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EvaluateMeasuresStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EvaluateMeasuresStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
