# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 2.1.0 2022-02-18T21:50:45Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ServiceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'up_time': 'str',
        'service_state': 'str',
        'state_details': 'str',
        'host_name': 'str',
        'request_count': 'int',
        'max_memory_mb': 'int',
        'commited_memory_mb': 'int',
        'in_use_memory_mb': 'int',
        'available_processors': 'int',
        'concurrent_requests': 'int',
        'max_concurrent_requests': 'int',
        'total_rejected_requests': 'int',
        'total_blocked_requests': 'int'
    }

    attribute_map = {
        'version': 'version',
        'up_time': 'upTime',
        'service_state': 'serviceState',
        'state_details': 'stateDetails',
        'host_name': 'hostName',
        'request_count': 'requestCount',
        'max_memory_mb': 'maxMemoryMb',
        'commited_memory_mb': 'commitedMemoryMb',
        'in_use_memory_mb': 'inUseMemoryMb',
        'available_processors': 'availableProcessors',
        'concurrent_requests': 'concurrentRequests',
        'max_concurrent_requests': 'maxConcurrentRequests',
        'total_rejected_requests': 'totalRejectedRequests',
        'total_blocked_requests': 'totalBlockedRequests'
    }

    def __init__(self, version=None, up_time=None, service_state=None, state_details=None, host_name=None, request_count=None, max_memory_mb=None, commited_memory_mb=None, in_use_memory_mb=None, available_processors=None, concurrent_requests=None, max_concurrent_requests=None, total_rejected_requests=None, total_blocked_requests=None, _configuration=None):  # noqa: E501
        """ServiceStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._version = None
        self._up_time = None
        self._service_state = None
        self._state_details = None
        self._host_name = None
        self._request_count = None
        self._max_memory_mb = None
        self._commited_memory_mb = None
        self._in_use_memory_mb = None
        self._available_processors = None
        self._concurrent_requests = None
        self._max_concurrent_requests = None
        self._total_rejected_requests = None
        self._total_blocked_requests = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if up_time is not None:
            self.up_time = up_time
        if service_state is not None:
            self.service_state = service_state
        if state_details is not None:
            self.state_details = state_details
        if host_name is not None:
            self.host_name = host_name
        if request_count is not None:
            self.request_count = request_count
        if max_memory_mb is not None:
            self.max_memory_mb = max_memory_mb
        if commited_memory_mb is not None:
            self.commited_memory_mb = commited_memory_mb
        if in_use_memory_mb is not None:
            self.in_use_memory_mb = in_use_memory_mb
        if available_processors is not None:
            self.available_processors = available_processors
        if concurrent_requests is not None:
            self.concurrent_requests = concurrent_requests
        if max_concurrent_requests is not None:
            self.max_concurrent_requests = max_concurrent_requests
        if total_rejected_requests is not None:
            self.total_rejected_requests = total_rejected_requests
        if total_blocked_requests is not None:
            self.total_blocked_requests = total_blocked_requests

    @property
    def version(self):
        """Gets the version of this ServiceStatus.  # noqa: E501

        version of the service  # noqa: E501

        :return: The version of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceStatus.

        version of the service  # noqa: E501

        :param version: The version of this ServiceStatus.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def up_time(self):
        """Gets the up_time of this ServiceStatus.  # noqa: E501

        service uptime since last restart  # noqa: E501

        :return: The up_time of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._up_time

    @up_time.setter
    def up_time(self, up_time):
        """Sets the up_time of this ServiceStatus.

        service uptime since last restart  # noqa: E501

        :param up_time: The up_time of this ServiceStatus.  # noqa: E501
        :type: str
        """

        self._up_time = up_time

    @property
    def service_state(self):
        """Gets the service_state of this ServiceStatus.  # noqa: E501

        scurrent service state  # noqa: E501

        :return: The service_state of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_state

    @service_state.setter
    def service_state(self, service_state):
        """Sets the service_state of this ServiceStatus.

        scurrent service state  # noqa: E501

        :param service_state: The service_state of this ServiceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "WARNING", "ERROR"]  # noqa: E501
        if (self._configuration.client_side_validation and
                service_state not in allowed_values):
            raise ValueError(
                "Invalid value for `service_state` ({0}), must be one of {1}"  # noqa: E501
                .format(service_state, allowed_values)
            )

        self._service_state = service_state

    @property
    def state_details(self):
        """Gets the state_details of this ServiceStatus.  # noqa: E501

        service state details  # noqa: E501

        :return: The state_details of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._state_details

    @state_details.setter
    def state_details(self, state_details):
        """Sets the state_details of this ServiceStatus.

        service state details  # noqa: E501

        :param state_details: The state_details of this ServiceStatus.  # noqa: E501
        :type: str
        """

        self._state_details = state_details

    @property
    def host_name(self):
        """Gets the host_name of this ServiceStatus.  # noqa: E501

        service uptime since last restart  # noqa: E501

        :return: The host_name of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ServiceStatus.

        service uptime since last restart  # noqa: E501

        :param host_name: The host_name of this ServiceStatus.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def request_count(self):
        """Gets the request_count of this ServiceStatus.  # noqa: E501

        total number of requests during uptime  # noqa: E501

        :return: The request_count of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._request_count

    @request_count.setter
    def request_count(self, request_count):
        """Sets the request_count of this ServiceStatus.

        total number of requests during uptime  # noqa: E501

        :param request_count: The request_count of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._request_count = request_count

    @property
    def max_memory_mb(self):
        """Gets the max_memory_mb of this ServiceStatus.  # noqa: E501

        Maximum memory used during uptime  # noqa: E501

        :return: The max_memory_mb of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._max_memory_mb

    @max_memory_mb.setter
    def max_memory_mb(self, max_memory_mb):
        """Sets the max_memory_mb of this ServiceStatus.

        Maximum memory used during uptime  # noqa: E501

        :param max_memory_mb: The max_memory_mb of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._max_memory_mb = max_memory_mb

    @property
    def commited_memory_mb(self):
        """Gets the commited_memory_mb of this ServiceStatus.  # noqa: E501

        Megabytes of committed memory  # noqa: E501

        :return: The commited_memory_mb of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._commited_memory_mb

    @commited_memory_mb.setter
    def commited_memory_mb(self, commited_memory_mb):
        """Sets the commited_memory_mb of this ServiceStatus.

        Megabytes of committed memory  # noqa: E501

        :param commited_memory_mb: The commited_memory_mb of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._commited_memory_mb = commited_memory_mb

    @property
    def in_use_memory_mb(self):
        """Gets the in_use_memory_mb of this ServiceStatus.  # noqa: E501

        Megabytes of memory used  # noqa: E501

        :return: The in_use_memory_mb of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._in_use_memory_mb

    @in_use_memory_mb.setter
    def in_use_memory_mb(self, in_use_memory_mb):
        """Sets the in_use_memory_mb of this ServiceStatus.

        Megabytes of memory used  # noqa: E501

        :param in_use_memory_mb: The in_use_memory_mb of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._in_use_memory_mb = in_use_memory_mb

    @property
    def available_processors(self):
        """Gets the available_processors of this ServiceStatus.  # noqa: E501

        number of available processors  # noqa: E501

        :return: The available_processors of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._available_processors

    @available_processors.setter
    def available_processors(self, available_processors):
        """Sets the available_processors of this ServiceStatus.

        number of available processors  # noqa: E501

        :param available_processors: The available_processors of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._available_processors = available_processors

    @property
    def concurrent_requests(self):
        """Gets the concurrent_requests of this ServiceStatus.  # noqa: E501

        number of concurrent requests  # noqa: E501

        :return: The concurrent_requests of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_requests

    @concurrent_requests.setter
    def concurrent_requests(self, concurrent_requests):
        """Sets the concurrent_requests of this ServiceStatus.

        number of concurrent requests  # noqa: E501

        :param concurrent_requests: The concurrent_requests of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._concurrent_requests = concurrent_requests

    @property
    def max_concurrent_requests(self):
        """Gets the max_concurrent_requests of this ServiceStatus.  # noqa: E501

        configured maximum concurrent request limit  # noqa: E501

        :return: The max_concurrent_requests of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrent_requests

    @max_concurrent_requests.setter
    def max_concurrent_requests(self, max_concurrent_requests):
        """Sets the max_concurrent_requests of this ServiceStatus.

        configured maximum concurrent request limit  # noqa: E501

        :param max_concurrent_requests: The max_concurrent_requests of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._max_concurrent_requests = max_concurrent_requests

    @property
    def total_rejected_requests(self):
        """Gets the total_rejected_requests of this ServiceStatus.  # noqa: E501

        number of rejected requests  # noqa: E501

        :return: The total_rejected_requests of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_rejected_requests

    @total_rejected_requests.setter
    def total_rejected_requests(self, total_rejected_requests):
        """Sets the total_rejected_requests of this ServiceStatus.

        number of rejected requests  # noqa: E501

        :param total_rejected_requests: The total_rejected_requests of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._total_rejected_requests = total_rejected_requests

    @property
    def total_blocked_requests(self):
        """Gets the total_blocked_requests of this ServiceStatus.  # noqa: E501

        number of blocked requests  # noqa: E501

        :return: The total_blocked_requests of this ServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_blocked_requests

    @total_blocked_requests.setter
    def total_blocked_requests(self, total_blocked_requests):
        """Sets the total_blocked_requests of this ServiceStatus.

        number of blocked requests  # noqa: E501

        :param total_blocked_requests: The total_blocked_requests of this ServiceStatus.  # noqa: E501
        :type: int
        """

        self._total_blocked_requests = total_blocked_requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceStatus):
            return True

        return self.to_dict() != other.to_dict()
