# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-03-12T22:07:17Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'message': 'str',
        'level': 'str',
        'description': 'str',
        'more_info': 'str',
        'correlation_id': 'str'
    }

    attribute_map = {
        'code': 'code',
        'message': 'message',
        'level': 'level',
        'description': 'description',
        'more_info': 'moreInfo',
        'correlation_id': 'correlationId'
    }

    def __init__(self, code=None, message=None, level=None, description=None, more_info=None, correlation_id=None):  # noqa: E501
        """ServiceError - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._message = None
        self._level = None
        self._description = None
        self._more_info = None
        self._correlation_id = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if message is not None:
            self.message = message
        if level is not None:
            self.level = level
        if description is not None:
            self.description = description
        if more_info is not None:
            self.more_info = more_info
        if correlation_id is not None:
            self.correlation_id = correlation_id

    @property
    def code(self):
        """Gets the code of this ServiceError.  # noqa: E501

        respone code  # noqa: E501

        :return: The code of this ServiceError.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ServiceError.

        respone code  # noqa: E501

        :param code: The code of this ServiceError.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this ServiceError.  # noqa: E501

        response error message  # noqa: E501

        :return: The message of this ServiceError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ServiceError.

        response error message  # noqa: E501

        :param message: The message of this ServiceError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def level(self):
        """Gets the level of this ServiceError.  # noqa: E501

        error severity level  # noqa: E501

        :return: The level of this ServiceError.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ServiceError.

        error severity level  # noqa: E501

        :param level: The level of this ServiceError.  # noqa: E501
        :type: str
        """
        allowed_values = ["ERROR", "WARNING", "INFO"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def description(self):
        """Gets the description of this ServiceError.  # noqa: E501

        error description  # noqa: E501

        :return: The description of this ServiceError.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceError.

        error description  # noqa: E501

        :param description: The description of this ServiceError.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def more_info(self):
        """Gets the more_info of this ServiceError.  # noqa: E501

        additional error information  # noqa: E501

        :return: The more_info of this ServiceError.  # noqa: E501
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this ServiceError.

        additional error information  # noqa: E501

        :param more_info: The more_info of this ServiceError.  # noqa: E501
        :type: str
        """

        self._more_info = more_info

    @property
    def correlation_id(self):
        """Gets the correlation_id of this ServiceError.  # noqa: E501

        error message correlation identifier  # noqa: E501

        :return: The correlation_id of this ServiceError.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this ServiceError.

        error message correlation identifier  # noqa: E501

        :param correlation_id: The correlation_id of this ServiceError.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
