# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-03-12T22:07:17Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PatientMeasureEvaluationGroupStratifierStratum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'component': 'list[PatientMeasureEvaluationGroupStratifierStratumComponent]',
        'population': 'list[PatientMeasureEvaluationPopulation]',
        'measure_score': 'PatientMeasureEvaluationQuantity'
    }

    attribute_map = {
        'value': 'value',
        'component': 'component',
        'population': 'population',
        'measure_score': 'measureScore'
    }

    def __init__(self, value=None, component=None, population=None, measure_score=None):  # noqa: E501
        """PatientMeasureEvaluationGroupStratifierStratum - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._component = None
        self._population = None
        self._measure_score = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if component is not None:
            self.component = component
        if population is not None:
            self.population = population
        if measure_score is not None:
            self.measure_score = measure_score

    @property
    def value(self):
        """Gets the value of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501

        The stratum value, e.g. male  # noqa: E501

        :return: The value of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PatientMeasureEvaluationGroupStratifierStratum.

        The stratum value, e.g. male  # noqa: E501

        :param value: The value of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def component(self):
        """Gets the component of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501

        Stratifier component values  # noqa: E501

        :return: The component of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501
        :rtype: list[PatientMeasureEvaluationGroupStratifierStratumComponent]
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this PatientMeasureEvaluationGroupStratifierStratum.

        Stratifier component values  # noqa: E501

        :param component: The component of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501
        :type: list[PatientMeasureEvaluationGroupStratifierStratumComponent]
        """

        self._component = component

    @property
    def population(self):
        """Gets the population of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501

        Population results in this stratum  # noqa: E501

        :return: The population of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501
        :rtype: list[PatientMeasureEvaluationPopulation]
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this PatientMeasureEvaluationGroupStratifierStratum.

        Population results in this stratum  # noqa: E501

        :param population: The population of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501
        :type: list[PatientMeasureEvaluationPopulation]
        """

        self._population = population

    @property
    def measure_score(self):
        """Gets the measure_score of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501


        :return: The measure_score of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501
        :rtype: PatientMeasureEvaluationQuantity
        """
        return self._measure_score

    @measure_score.setter
    def measure_score(self, measure_score):
        """Sets the measure_score of this PatientMeasureEvaluationGroupStratifierStratum.


        :param measure_score: The measure_score of this PatientMeasureEvaluationGroupStratifierStratum.  # noqa: E501
        :type: PatientMeasureEvaluationQuantity
        """

        self._measure_score = measure_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PatientMeasureEvaluationGroupStratifierStratum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatientMeasureEvaluationGroupStratifierStratum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
