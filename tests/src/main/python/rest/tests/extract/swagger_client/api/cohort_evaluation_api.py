# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 2.1.0 2022-02-18T21:50:45Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CohortEvaluationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def evaluate_cohort(self, version, request_data, cql_definition, **kwargs):  # noqa: E501
        """Evaluates a specific define within a CQL for a set of patients  # noqa: E501

        The body of the request is a multipart/form-data request with  an application/zip attachment named 'cql_definition' that contains the cohort cql definition to be evaluated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_cohort(version, request_data, cql_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param file request_data: <p>A configuration file containing the information needed to process a cohort evaluation request. Two possible FHIR server endoints can be configured <code>dataServerConfig</code> and <code>terminologyServerConfig</code>. Only the <code>dataServerConfig</code> is required. If <code>terminologyServerConfig</code> is not provided, the connection details are assumed to be the same as the <code>dataServerConfig</code> connection.</p><p>The <code>defineToRun</code> will be the specific define of the given CQL to analyze the patients against</code></p><p>The <code>entrypoint</code> will be the cql file containing the define intended to run, as defined by the <code>defineToRun</code></p><p>The <code>patientIds</code> is a comma separated list of patients to run. Supplying a single patient does not need any trailing commas.</p><p>The parameter types and formats are described in detail in the <a href=\"http://alvearie.io/quality-measure-and-cohort-service/#/user-guide/parameter-formats?id=parameter-formats\">user guide</a>.</p><p>The <code>loggingLevel</code> will determine how much and what type of logging to provide. The options are NA, COVERAGE, and TRACE.</p><p>Example Contents:   <pre>{     \"dataServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     },     \"patientIds\": \"PATIENTIDS\",      \"parameters\": {             \"Measurement Period\": {                 \"type\": \"interval\",                 \"start\": {                     \"type\": \"date\",                     \"value\": \"2019-07-04\"                 },                 \"startInclusive\": true,                 \"end\": {                     \"type\": \"date\",                     \"value\": \"2020-07-04\"                 },                 \"endInclusive\": true     },     \"entrypoint\": Test-1.0.0.cql     \"defineToRun\": InitialPopulation     \"loggingLevel\": NA }</pre></p> (required)
        :param file cql_definition: A zip file containing the cohort definition to run. NOTE: The name of the file must follow the convention [NAME]-[VERSION].zip (required)
        :return: CohortResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.evaluate_cohort_with_http_info(version, request_data, cql_definition, **kwargs)  # noqa: E501
        else:
            (data) = self.evaluate_cohort_with_http_info(version, request_data, cql_definition, **kwargs)  # noqa: E501
            return data

    def evaluate_cohort_with_http_info(self, version, request_data, cql_definition, **kwargs):  # noqa: E501
        """Evaluates a specific define within a CQL for a set of patients  # noqa: E501

        The body of the request is a multipart/form-data request with  an application/zip attachment named 'cql_definition' that contains the cohort cql definition to be evaluated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_cohort_with_http_info(version, request_data, cql_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version: The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. (required)
        :param file request_data: <p>A configuration file containing the information needed to process a cohort evaluation request. Two possible FHIR server endoints can be configured <code>dataServerConfig</code> and <code>terminologyServerConfig</code>. Only the <code>dataServerConfig</code> is required. If <code>terminologyServerConfig</code> is not provided, the connection details are assumed to be the same as the <code>dataServerConfig</code> connection.</p><p>The <code>defineToRun</code> will be the specific define of the given CQL to analyze the patients against</code></p><p>The <code>entrypoint</code> will be the cql file containing the define intended to run, as defined by the <code>defineToRun</code></p><p>The <code>patientIds</code> is a comma separated list of patients to run. Supplying a single patient does not need any trailing commas.</p><p>The parameter types and formats are described in detail in the <a href=\"http://alvearie.io/quality-measure-and-cohort-service/#/user-guide/parameter-formats?id=parameter-formats\">user guide</a>.</p><p>The <code>loggingLevel</code> will determine how much and what type of logging to provide. The options are NA, COVERAGE, and TRACE.</p><p>Example Contents:   <pre>{     \"dataServerConfig\": {         \"@class\": \"com.ibm.cohort.fhir.client.config.IBMFhirServerConfig\",         \"endpoint\": \"ENDPOINT\",         \"user\": \"USER\",         \"password\": \"PASSWORD\",         \"logInfo\": [             \"REQUEST_SUMMARY\",             \"RESPONSE_SUMMARY\"         ],         \"tenantId\": \"default\"     },     \"patientIds\": \"PATIENTIDS\",      \"parameters\": {             \"Measurement Period\": {                 \"type\": \"interval\",                 \"start\": {                     \"type\": \"date\",                     \"value\": \"2019-07-04\"                 },                 \"startInclusive\": true,                 \"end\": {                     \"type\": \"date\",                     \"value\": \"2020-07-04\"                 },                 \"endInclusive\": true     },     \"entrypoint\": Test-1.0.0.cql     \"defineToRun\": InitialPopulation     \"loggingLevel\": NA }</pre></p> (required)
        :param file cql_definition: A zip file containing the cohort definition to run. NOTE: The name of the file must follow the convention [NAME]-[VERSION].zip (required)
        :return: CohortResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version', 'request_data', 'cql_definition']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluate_cohort" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `evaluate_cohort`")  # noqa: E501
        # verify the required parameter 'request_data' is set
        if self.api_client.client_side_validation and ('request_data' not in params or
                                                       params['request_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request_data` when calling `evaluate_cohort`")  # noqa: E501
        # verify the required parameter 'cql_definition' is set
        if self.api_client.client_side_validation and ('cql_definition' not in params or
                                                       params['cql_definition'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cql_definition` when calling `evaluate_cohort`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            local_var_files['request_data'] = params['request_data']  # noqa: E501
        if 'cql_definition' in params:
            local_var_files['cql_definition'] = params['cql_definition']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/cohort-evaluation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CohortResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
