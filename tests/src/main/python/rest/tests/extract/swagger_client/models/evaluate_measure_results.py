# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-03-12T22:07:17Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EvaluateMeasureResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant': 'str',
        'identifier': 'str',
        'status': 'str',
        'type': 'str',
        'measure': 'str',
        'subject': 'list[str]',
        '_date': 'datetime',
        'reporter': 'str',
        'period': 'PatientMeasureEvaluationPeriod',
        'improvement_notation': 'str',
        'group': 'list[PatientMeasureEvaluationGroup]',
        'evaluated_resource': 'list[str]'
    }

    attribute_map = {
        'tenant': 'tenant',
        'identifier': 'identifier',
        'status': 'status',
        'type': 'type',
        'measure': 'measure',
        'subject': 'subject',
        '_date': 'date',
        'reporter': 'reporter',
        'period': 'period',
        'improvement_notation': 'improvementNotation',
        'group': 'group',
        'evaluated_resource': 'evaluatedResource'
    }

    def __init__(self, tenant=None, identifier=None, status=None, type=None, measure=None, subject=None, _date=None, reporter=None, period=None, improvement_notation=None, group=None, evaluated_resource=None):  # noqa: E501
        """EvaluateMeasureResults - a model defined in Swagger"""  # noqa: E501
        self._tenant = None
        self._identifier = None
        self._status = None
        self._type = None
        self._measure = None
        self._subject = None
        self.__date = None
        self._reporter = None
        self._period = None
        self._improvement_notation = None
        self._group = None
        self._evaluated_resource = None
        self.discriminator = None
        if tenant is not None:
            self.tenant = tenant
        if identifier is not None:
            self.identifier = identifier
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if measure is not None:
            self.measure = measure
        if subject is not None:
            self.subject = subject
        if _date is not None:
            self._date = _date
        if reporter is not None:
            self.reporter = reporter
        if period is not None:
            self.period = period
        if improvement_notation is not None:
            self.improvement_notation = improvement_notation
        if group is not None:
            self.group = group
        if evaluated_resource is not None:
            self.evaluated_resource = evaluated_resource

    @property
    def tenant(self):
        """Gets the tenant of this EvaluateMeasureResults.  # noqa: E501

        Tenant the measure was evaluated for  # noqa: E501

        :return: The tenant of this EvaluateMeasureResults.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this EvaluateMeasureResults.

        Tenant the measure was evaluated for  # noqa: E501

        :param tenant: The tenant of this EvaluateMeasureResults.  # noqa: E501
        :type: str
        """

        self._tenant = tenant

    @property
    def identifier(self):
        """Gets the identifier of this EvaluateMeasureResults.  # noqa: E501

        Additional identifier for the MeasureReport  # noqa: E501

        :return: The identifier of this EvaluateMeasureResults.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this EvaluateMeasureResults.

        Additional identifier for the MeasureReport  # noqa: E501

        :param identifier: The identifier of this EvaluateMeasureResults.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def status(self):
        """Gets the status of this EvaluateMeasureResults.  # noqa: E501

        complete | pending | error  # noqa: E501

        :return: The status of this EvaluateMeasureResults.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EvaluateMeasureResults.

        complete | pending | error  # noqa: E501

        :param status: The status of this EvaluateMeasureResults.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this EvaluateMeasureResults.  # noqa: E501

        individual | subject-list | summary | data-collection  # noqa: E501

        :return: The type of this EvaluateMeasureResults.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EvaluateMeasureResults.

        individual | subject-list | summary | data-collection  # noqa: E501

        :param type: The type of this EvaluateMeasureResults.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def measure(self):
        """Gets the measure of this EvaluateMeasureResults.  # noqa: E501

        What measure was calculated (measureId)  # noqa: E501

        :return: The measure of this EvaluateMeasureResults.  # noqa: E501
        :rtype: str
        """
        return self._measure

    @measure.setter
    def measure(self, measure):
        """Sets the measure of this EvaluateMeasureResults.

        What measure was calculated (measureId)  # noqa: E501

        :param measure: The measure of this EvaluateMeasureResults.  # noqa: E501
        :type: str
        """

        self._measure = measure

    @property
    def subject(self):
        """Gets the subject of this EvaluateMeasureResults.  # noqa: E501

        What individual(s) the report is for (subjectId) (Patient | Practitioner | PractitionerRole | Location | Device | RelatedPerson | Group  # noqa: E501

        :return: The subject of this EvaluateMeasureResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EvaluateMeasureResults.

        What individual(s) the report is for (subjectId) (Patient | Practitioner | PractitionerRole | Location | Device | RelatedPerson | Group  # noqa: E501

        :param subject: The subject of this EvaluateMeasureResults.  # noqa: E501
        :type: list[str]
        """

        self._subject = subject

    @property
    def _date(self):
        """Gets the _date of this EvaluateMeasureResults.  # noqa: E501

        When the report was generated  # noqa: E501

        :return: The _date of this EvaluateMeasureResults.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EvaluateMeasureResults.

        When the report was generated  # noqa: E501

        :param _date: The _date of this EvaluateMeasureResults.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def reporter(self):
        """Gets the reporter of this EvaluateMeasureResults.  # noqa: E501

        Who is reporting the data  # noqa: E501

        :return: The reporter of this EvaluateMeasureResults.  # noqa: E501
        :rtype: str
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this EvaluateMeasureResults.

        Who is reporting the data  # noqa: E501

        :param reporter: The reporter of this EvaluateMeasureResults.  # noqa: E501
        :type: str
        """

        self._reporter = reporter

    @property
    def period(self):
        """Gets the period of this EvaluateMeasureResults.  # noqa: E501


        :return: The period of this EvaluateMeasureResults.  # noqa: E501
        :rtype: PatientMeasureEvaluationPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this EvaluateMeasureResults.


        :param period: The period of this EvaluateMeasureResults.  # noqa: E501
        :type: PatientMeasureEvaluationPeriod
        """

        self._period = period

    @property
    def improvement_notation(self):
        """Gets the improvement_notation of this EvaluateMeasureResults.  # noqa: E501

        increase | decrease  # noqa: E501

        :return: The improvement_notation of this EvaluateMeasureResults.  # noqa: E501
        :rtype: str
        """
        return self._improvement_notation

    @improvement_notation.setter
    def improvement_notation(self, improvement_notation):
        """Sets the improvement_notation of this EvaluateMeasureResults.

        increase | decrease  # noqa: E501

        :param improvement_notation: The improvement_notation of this EvaluateMeasureResults.  # noqa: E501
        :type: str
        """

        self._improvement_notation = improvement_notation

    @property
    def group(self):
        """Gets the group of this EvaluateMeasureResults.  # noqa: E501


        :return: The group of this EvaluateMeasureResults.  # noqa: E501
        :rtype: list[PatientMeasureEvaluationGroup]
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this EvaluateMeasureResults.


        :param group: The group of this EvaluateMeasureResults.  # noqa: E501
        :type: list[PatientMeasureEvaluationGroup]
        """

        self._group = group

    @property
    def evaluated_resource(self):
        """Gets the evaluated_resource of this EvaluateMeasureResults.  # noqa: E501


        :return: The evaluated_resource of this EvaluateMeasureResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._evaluated_resource

    @evaluated_resource.setter
    def evaluated_resource(self, evaluated_resource):
        """Sets the evaluated_resource of this EvaluateMeasureResults.


        :param evaluated_resource: The evaluated_resource of this EvaluateMeasureResults.  # noqa: E501
        :type: list[str]
        """

        self._evaluated_resource = evaluated_resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EvaluateMeasureResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EvaluateMeasureResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
