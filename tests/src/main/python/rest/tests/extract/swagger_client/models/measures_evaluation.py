# coding: utf-8

"""
    IBM Cohort Engine

    Service to evaluate cohorts and measures  # noqa: E501

    OpenAPI spec version: 0.0.1 2021-03-12T22:07:17Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeasuresEvaluation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'patients_tenant_id': 'str',
        'patients_server_url': 'str',
        'patient_server_connection_properties': 'list[str]',
        'measure_tenant_id': 'str',
        'measure_server_url': 'str',
        'measure_server_connection_properties': 'list[str]',
        'results_valid_til': 'int',
        'measure_evaluations': 'list[PatientMeasureEvaluations]'
    }

    attribute_map = {
        'patients_tenant_id': 'patientsTenantId',
        'patients_server_url': 'patientsServerUrl',
        'patient_server_connection_properties': 'patientServerConnectionProperties',
        'measure_tenant_id': 'measureTenantId',
        'measure_server_url': 'measureServerUrl',
        'measure_server_connection_properties': 'measureServerConnectionProperties',
        'results_valid_til': 'resultsValidTil',
        'measure_evaluations': 'MeasureEvaluations'
    }

    def __init__(self, patients_tenant_id=None, patients_server_url=None, patient_server_connection_properties=None, measure_tenant_id=None, measure_server_url=None, measure_server_connection_properties=None, results_valid_til=None, measure_evaluations=None):  # noqa: E501
        """MeasuresEvaluation - a model defined in Swagger"""  # noqa: E501
        self._patients_tenant_id = None
        self._patients_server_url = None
        self._patient_server_connection_properties = None
        self._measure_tenant_id = None
        self._measure_server_url = None
        self._measure_server_connection_properties = None
        self._results_valid_til = None
        self._measure_evaluations = None
        self.discriminator = None
        if patients_tenant_id is not None:
            self.patients_tenant_id = patients_tenant_id
        if patients_server_url is not None:
            self.patients_server_url = patients_server_url
        if patient_server_connection_properties is not None:
            self.patient_server_connection_properties = patient_server_connection_properties
        self.measure_tenant_id = measure_tenant_id
        self.measure_server_url = measure_server_url
        if measure_server_connection_properties is not None:
            self.measure_server_connection_properties = measure_server_connection_properties
        if results_valid_til is not None:
            self.results_valid_til = results_valid_til
        self.measure_evaluations = measure_evaluations

    @property
    def patients_tenant_id(self):
        """Gets the patients_tenant_id of this MeasuresEvaluation.  # noqa: E501

        Tenant identifier for the tenant these patients are associated with  # noqa: E501

        :return: The patients_tenant_id of this MeasuresEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._patients_tenant_id

    @patients_tenant_id.setter
    def patients_tenant_id(self, patients_tenant_id):
        """Sets the patients_tenant_id of this MeasuresEvaluation.

        Tenant identifier for the tenant these patients are associated with  # noqa: E501

        :param patients_tenant_id: The patients_tenant_id of this MeasuresEvaluation.  # noqa: E501
        :type: str
        """

        self._patients_tenant_id = patients_tenant_id

    @property
    def patients_server_url(self):
        """Gets the patients_server_url of this MeasuresEvaluation.  # noqa: E501

        URL specifying the server used to store the patients  # noqa: E501

        :return: The patients_server_url of this MeasuresEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._patients_server_url

    @patients_server_url.setter
    def patients_server_url(self, patients_server_url):
        """Sets the patients_server_url of this MeasuresEvaluation.

        URL specifying the server used to store the patients  # noqa: E501

        :param patients_server_url: The patients_server_url of this MeasuresEvaluation.  # noqa: E501
        :type: str
        """

        self._patients_server_url = patients_server_url

    @property
    def patient_server_connection_properties(self):
        """Gets the patient_server_connection_properties of this MeasuresEvaluation.  # noqa: E501

        A list of connection property strings to be used for the measure server  # noqa: E501

        :return: The patient_server_connection_properties of this MeasuresEvaluation.  # noqa: E501
        :rtype: list[str]
        """
        return self._patient_server_connection_properties

    @patient_server_connection_properties.setter
    def patient_server_connection_properties(self, patient_server_connection_properties):
        """Sets the patient_server_connection_properties of this MeasuresEvaluation.

        A list of connection property strings to be used for the measure server  # noqa: E501

        :param patient_server_connection_properties: The patient_server_connection_properties of this MeasuresEvaluation.  # noqa: E501
        :type: list[str]
        """

        self._patient_server_connection_properties = patient_server_connection_properties

    @property
    def measure_tenant_id(self):
        """Gets the measure_tenant_id of this MeasuresEvaluation.  # noqa: E501

        Tenant identifier for the tenant this measure is associated with  # noqa: E501

        :return: The measure_tenant_id of this MeasuresEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._measure_tenant_id

    @measure_tenant_id.setter
    def measure_tenant_id(self, measure_tenant_id):
        """Sets the measure_tenant_id of this MeasuresEvaluation.

        Tenant identifier for the tenant this measure is associated with  # noqa: E501

        :param measure_tenant_id: The measure_tenant_id of this MeasuresEvaluation.  # noqa: E501
        :type: str
        """
        if measure_tenant_id is None:
            raise ValueError("Invalid value for `measure_tenant_id`, must not be `None`")  # noqa: E501

        self._measure_tenant_id = measure_tenant_id

    @property
    def measure_server_url(self):
        """Gets the measure_server_url of this MeasuresEvaluation.  # noqa: E501

        URL specifying the server used to store the measure  # noqa: E501

        :return: The measure_server_url of this MeasuresEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._measure_server_url

    @measure_server_url.setter
    def measure_server_url(self, measure_server_url):
        """Sets the measure_server_url of this MeasuresEvaluation.

        URL specifying the server used to store the measure  # noqa: E501

        :param measure_server_url: The measure_server_url of this MeasuresEvaluation.  # noqa: E501
        :type: str
        """
        if measure_server_url is None:
            raise ValueError("Invalid value for `measure_server_url`, must not be `None`")  # noqa: E501

        self._measure_server_url = measure_server_url

    @property
    def measure_server_connection_properties(self):
        """Gets the measure_server_connection_properties of this MeasuresEvaluation.  # noqa: E501

        A list of connection property strings to be used for the measure server  # noqa: E501

        :return: The measure_server_connection_properties of this MeasuresEvaluation.  # noqa: E501
        :rtype: list[str]
        """
        return self._measure_server_connection_properties

    @measure_server_connection_properties.setter
    def measure_server_connection_properties(self, measure_server_connection_properties):
        """Sets the measure_server_connection_properties of this MeasuresEvaluation.

        A list of connection property strings to be used for the measure server  # noqa: E501

        :param measure_server_connection_properties: The measure_server_connection_properties of this MeasuresEvaluation.  # noqa: E501
        :type: list[str]
        """

        self._measure_server_connection_properties = measure_server_connection_properties

    @property
    def results_valid_til(self):
        """Gets the results_valid_til of this MeasuresEvaluation.  # noqa: E501

        Number of minutes the job results will be available after the job completes  # noqa: E501

        :return: The results_valid_til of this MeasuresEvaluation.  # noqa: E501
        :rtype: int
        """
        return self._results_valid_til

    @results_valid_til.setter
    def results_valid_til(self, results_valid_til):
        """Sets the results_valid_til of this MeasuresEvaluation.

        Number of minutes the job results will be available after the job completes  # noqa: E501

        :param results_valid_til: The results_valid_til of this MeasuresEvaluation.  # noqa: E501
        :type: int
        """

        self._results_valid_til = results_valid_til

    @property
    def measure_evaluations(self):
        """Gets the measure_evaluations of this MeasuresEvaluation.  # noqa: E501


        :return: The measure_evaluations of this MeasuresEvaluation.  # noqa: E501
        :rtype: list[PatientMeasureEvaluations]
        """
        return self._measure_evaluations

    @measure_evaluations.setter
    def measure_evaluations(self, measure_evaluations):
        """Sets the measure_evaluations of this MeasuresEvaluation.


        :param measure_evaluations: The measure_evaluations of this MeasuresEvaluation.  # noqa: E501
        :type: list[PatientMeasureEvaluations]
        """
        if measure_evaluations is None:
            raise ValueError("Invalid value for `measure_evaluations`, must not be `None`")  # noqa: E501

        self._measure_evaluations = measure_evaluations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeasuresEvaluation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasuresEvaluation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
